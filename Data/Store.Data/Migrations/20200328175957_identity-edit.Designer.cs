// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Data;

namespace Store.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20200328175957_identity-edit")]
    partial class identityedit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Store.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            AccountNumber = "123213",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(4814),
                            UserId = "0dcd5437-0bc7-40ba-b87b-5d5f5e177929"
                        },
                        new
                        {
                            Id = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            AccountNumber = "134519",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(5878),
                            UserId = "71ae1df7-a006-4a2b-b0a5-31cf12583ac9"
                        },
                        new
                        {
                            Id = "e4069e1a-5560-4e2b-8c12-098da53c893e",
                            AccountNumber = "914311",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(5910),
                            UserId = "3c452363-ea64-4fac-934c-95a8c892fb04"
                        },
                        new
                        {
                            Id = "d3cad1bc-654f-4600-8471-c9dea0307964",
                            AccountNumber = "618299",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(5919),
                            UserId = "4fee8d86-bed2-48df-9b2c-f02835b35099"
                        },
                        new
                        {
                            Id = "d293c4d5-897a-4296-9a25-4693f6bde8ef",
                            AccountNumber = "091234",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(5926),
                            UserId = "4696c10b-8fd9-4dc3-b70d-9a4a9cd60aa8"
                        });
                });

            modelBuilder.Entity("Store.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnName("Department_Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "e7ee5f0b-3ef0-4959-bf12-5c25f2fa8c8f",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 714, DateTimeKind.Local).AddTicks(8503),
                            DepartmentName = "Sales"
                        },
                        new
                        {
                            Id = "76676194-ad55-41a0-a515-6f8ca54b1791",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 714, DateTimeKind.Local).AddTicks(9836),
                            DepartmentName = "CEO"
                        },
                        new
                        {
                            Id = "ff24da7e-d0fe-4452-88c6-6a0636e6e8ad",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 714, DateTimeKind.Local).AddTicks(9878),
                            DepartmentName = "Warehouse"
                        });
                });

            modelBuilder.Entity("Store.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnName("Employee_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "7cd3b260-1376-492b-a230-724a09532112",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1824),
                            DepartmentId = "e7ee5f0b-3ef0-4959-bf12-5c25f2fa8c8f",
                            UserId = "4696c10b-8fd9-4dc3-b70d-9a4a9cd60aa8"
                        },
                        new
                        {
                            Id = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1889),
                            DepartmentId = "e7ee5f0b-3ef0-4959-bf12-5c25f2fa8c8f",
                            UserId = "597d6bd2-63db-4a77-8194-bf7ba6e0872f"
                        },
                        new
                        {
                            Id = "91fd0c0f-93f0-4472-8d6a-8397850e1b9a",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1898),
                            DepartmentId = "ff24da7e-d0fe-4452-88c6-6a0636e6e8ad",
                            UserId = "8596e3f0-646b-4f4f-9a29-26e46a3eff93"
                        },
                        new
                        {
                            Id = "d9b74665-16b9-4e9f-9dbf-03ccb1ccb818",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1906),
                            DepartmentId = "ff24da7e-d0fe-4452-88c6-6a0636e6e8ad",
                            UserId = "d08a0aa9-3dfd-4dd5-a0fd-2b92a98957dd"
                        },
                        new
                        {
                            Id = "e2b8ad7b-8c8a-425e-bb5a-80f11f2e464c",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1924),
                            UserId = "ce6ad629-339a-475b-bc6c-198fca6a03a3"
                        },
                        new
                        {
                            Id = "7ac1eb4f-b127-456c-9d22-5b1e4fb7aedd",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(1932),
                            DepartmentId = "e7ee5f0b-3ef0-4959-bf12-5c25f2fa8c8f",
                            UserId = "819c826b-b24f-4f01-bef4-57b21a092a1b"
                        });
                });

            modelBuilder.Entity("Store.Models.EmployeeCustomers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCustomers");

                    b.HasData(
                        new
                        {
                            Id = "05ba135e-33fc-400d-9d85-fda69abe29ee",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(5931),
                            CustomerId = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112"
                        },
                        new
                        {
                            Id = "35435880-fa60-48bb-ae30-59e42c648640",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7191),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112"
                        },
                        new
                        {
                            Id = "941a9d00-690e-40b1-bd19-3e7ed4371c55",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7313),
                            CustomerId = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e"
                        },
                        new
                        {
                            Id = "363c56c9-f8c4-42d1-95f2-5c8de2ed5611",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7321),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e"
                        },
                        new
                        {
                            Id = "2edfa306-691d-4b4f-8299-0ec3a3260de6",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7330),
                            CustomerId = "e4069e1a-5560-4e2b-8c12-098da53c893e",
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e"
                        },
                        new
                        {
                            Id = "93fcd2c7-a30c-4542-8cff-4ecda2533438",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7338),
                            CustomerId = "d293c4d5-897a-4296-9a25-4693f6bde8ef",
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112"
                        },
                        new
                        {
                            Id = "2639e831-9b33-4457-8135-731ffeee7598",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(7344),
                            CustomerId = "d3cad1bc-654f-4600-8471-c9dea0307964",
                            EmployeeId = "7ac1eb4f-b127-456c-9d22-5b1e4fb7aedd"
                        });
                });

            modelBuilder.Entity("Store.Models.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoDir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Store.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "cc9e7577-a4b6-413c-ade2-7f249a1ae631",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 715, DateTimeKind.Local).AddTicks(8689),
                            CurrentQuantity = 0,
                            Description = "product1",
                            ProductName = "Product1",
                            ProductPrice = 10m
                        },
                        new
                        {
                            Id = "ddc924a7-8a83-4781-b7dc-866da899525f",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(357),
                            CurrentQuantity = 0,
                            Description = "product2",
                            ProductName = "Product2",
                            ProductPrice = 5m
                        },
                        new
                        {
                            Id = "d83737cb-40a0-4cc1-8cb5-ccf335148863",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(403),
                            CurrentQuantity = 0,
                            Description = "product3",
                            ProductName = "Product3",
                            ProductPrice = 1m
                        },
                        new
                        {
                            Id = "2b4acedf-3b88-47dd-ab3b-e30904468fee",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(413),
                            CurrentQuantity = 0,
                            Description = "product4",
                            ProductName = "Product4",
                            ProductPrice = 45m
                        },
                        new
                        {
                            Id = "b28596e7-1d8d-468a-b682-2dc115bb1c8b",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(420),
                            CurrentQuantity = 0,
                            Description = "product5",
                            ProductName = "Product5",
                            ProductPrice = 11m
                        },
                        new
                        {
                            Id = "3061b56a-d4af-43cf-8f0c-dfbda75138c1",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(428),
                            CurrentQuantity = 0,
                            Description = "product6",
                            ProductName = "Product6",
                            ProductPrice = 19m
                        },
                        new
                        {
                            Id = "05edd358-f76a-4c0b-8ae3-d252448b9ffe",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(546),
                            CurrentQuantity = 0,
                            Description = "product7",
                            ProductName = "Product7",
                            ProductPrice = 2m
                        },
                        new
                        {
                            Id = "aa2a3f59-5a9d-4bbe-bb27-fd23e6e6bbbf",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(558),
                            CurrentQuantity = 0,
                            Description = "product8",
                            ProductName = "Product8",
                            ProductPrice = 22m
                        },
                        new
                        {
                            Id = "4462f1c7-4b12-4503-8beb-3784bad34344",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(567),
                            CurrentQuantity = 0,
                            Description = "product9",
                            ProductName = "Product9",
                            ProductPrice = 13m
                        },
                        new
                        {
                            Id = "ea014a4f-0aca-4953-adce-5eb4c381912e",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 716, DateTimeKind.Local).AddTicks(579),
                            CurrentQuantity = 0,
                            Description = "product10",
                            ProductName = "Product10",
                            ProductPrice = 100m
                        });
                });

            modelBuilder.Entity("Store.Models.SaleOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("SaleOrders");

                    b.HasData(
                        new
                        {
                            Id = "2e2a584b-5c4c-4861-a8fe-34378efd742a",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 718, DateTimeKind.Local).AddTicks(8217),
                            CustomerId = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112",
                            ProductId = "cc9e7577-a4b6-413c-ade2-7f249a1ae631",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "4c2d8306-a4bb-4c10-871d-d136cd5bcae5",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(946),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112",
                            ProductId = "ddc924a7-8a83-4781-b7dc-866da899525f",
                            Quantity = 1
                        },
                        new
                        {
                            Id = "31287f49-6c2e-467d-baab-5421e66d411d",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1007),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "b28596e7-1d8d-468a-b682-2dc115bb1c8b",
                            Quantity = 8
                        },
                        new
                        {
                            Id = "11c04314-a122-4d8c-a387-2e8f667b40bc",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1017),
                            CustomerId = "e4069e1a-5560-4e2b-8c12-098da53c893e",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "4462f1c7-4b12-4503-8beb-3784bad34344",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "d309dbf1-c37a-4190-90fb-0f1ffeb37fa8",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1025),
                            CustomerId = "d3cad1bc-654f-4600-8471-c9dea0307964",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112",
                            ProductId = "ea014a4f-0aca-4953-adce-5eb4c381912e",
                            Quantity = 7
                        },
                        new
                        {
                            Id = "ff31e1e6-a4ff-42b0-804b-43d2d3e35be6",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1033),
                            CustomerId = "d3cad1bc-654f-4600-8471-c9dea0307964",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7ac1eb4f-b127-456c-9d22-5b1e4fb7aedd",
                            ProductId = "d83737cb-40a0-4cc1-8cb5-ccf335148863",
                            Quantity = 15
                        },
                        new
                        {
                            Id = "286f9c83-4378-4b9e-a886-78130687a2da",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1041),
                            CustomerId = "d293c4d5-897a-4296-9a25-4693f6bde8ef",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112",
                            ProductId = "aa2a3f59-5a9d-4bbe-bb27-fd23e6e6bbbf",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "a1fea377-fcfc-456e-885d-8ecfa8c3192c",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1049),
                            CustomerId = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "cc9e7577-a4b6-413c-ade2-7f249a1ae631",
                            Quantity = 4
                        },
                        new
                        {
                            Id = "3eb28c3b-a0ca-4ab6-8ed6-f46683059b41",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1173),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "05edd358-f76a-4c0b-8ae3-d252448b9ffe",
                            Quantity = 8
                        },
                        new
                        {
                            Id = "0fbce389-eddd-4022-ba17-6072ae4717b2",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1185),
                            CustomerId = "5814b840-0c68-4d1c-9dc6-90d7178298e8",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "cc9e7577-a4b6-413c-ade2-7f249a1ae631",
                            Quantity = 2
                        },
                        new
                        {
                            Id = "d09b642a-2feb-47f9-a0e8-fd78a2c6b1a4",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1192),
                            CustomerId = "d293c4d5-897a-4296-9a25-4693f6bde8ef",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7ac1eb4f-b127-456c-9d22-5b1e4fb7aedd",
                            ProductId = "ddc924a7-8a83-4781-b7dc-866da899525f",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "243a6712-7186-4f02-9a57-0e007de799f0",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1199),
                            CustomerId = "d293c4d5-897a-4296-9a25-4693f6bde8ef",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "7cd3b260-1376-492b-a230-724a09532112",
                            ProductId = "ddc924a7-8a83-4781-b7dc-866da899525f",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "f99ce219-6069-4ef1-9046-4b038dcb3379",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 719, DateTimeKind.Local).AddTicks(1207),
                            CustomerId = "e3a5f66c-c766-4d22-a3da-ec778b6174d6",
                            DateOfSale = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2ea1896c-b31a-4aff-a555-4a976c64bb5e",
                            ProductId = "4462f1c7-4b12-4503-8beb-3784bad34344",
                            Quantity = 19
                        });
                });

            modelBuilder.Entity("Store.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4696c10b-8fd9-4dc3-b70d-9a4a9cd60aa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "230bb3a4-b2be-4e89-bf8c-74e40275b30e",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 625, DateTimeKind.Local).AddTicks(2734),
                            Email = "user1@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEJg9sRcPMYkP2IIofYVlgEXlAeHYBMAK1D6N44fk/AUHzK8QiGnFpodF/Btz+aYhnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39fc85b9-f8d9-4860-bd13-713ac2e92cb7",
                            Telephone = "222-222-222",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "597d6bd2-63db-4a77-8194-bf7ba6e0872f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef8bd5bf-045d-498f-87d6-52f6409633a7",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7625),
                            Email = "user2@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+yUatBpqyAucVarYgcJV+yYS62NmTDuYkKOLyI/d7r5kIdKG/2lWuldtfTAmwCnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cb46ae3-224e-4ceb-a26f-3a79bc040f29",
                            Telephone = "443-111-222",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8596e3f0-646b-4f4f-9a29-26e46a3eff93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2c5beaf-e166-4506-be4b-2df5912f003f",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7712),
                            Email = "user3@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAECXkkjJ4hfwe2eAAdNxGaAX/gU1vesURr54zBv/BGBrp2TgjKsIFh+wn1BJXvUARhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01dc99ca-69b4-41f0-92a1-4fb2d363bc98",
                            Telephone = "443-122-222",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d08a0aa9-3dfd-4dd5-a0fd-2b92a98957dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61c06445-e7f8-4ef1-8f75-9f58ff1c7467",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7738),
                            Email = "user4@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPeBntJdVe/WUW82VCJ1ilMcAhP3g+2PWqIr4DLs1d5AzD3kthMZAt9Ym5N3frXvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbd76d36-c196-4a1d-9631-a6427f6bbba4",
                            Telephone = "443-431-222",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ce6ad629-339a-475b-bc6c-198fca6a03a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05fc2d30-f330-4045-b5c3-9da5e6fbda1e",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7752),
                            Email = "user5@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEPwtUqCxPpBwXvFynDxyBjoGHO8FUigUIKebkhp/sz8gyQqxJUehJev039DIFIC7Bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a41f14c-eb60-4212-ae86-c7a49feefd35",
                            Telephone = "443-111-857",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "819c826b-b24f-4f01-bef4-57b21a092a1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f82615-d731-487e-ad06-cabf28db4ebc",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7768),
                            Email = "user6@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENndrTCXHaKtyYm9tfodClhpSa0ftGTzM5rBY6/FM9FMH3w6hTdrhBtTY68hO71pug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87f802c5-4622-4a87-ae2d-991d395c62e9",
                            Telephone = "443-111-347",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0dcd5437-0bc7-40ba-b87b-5d5f5e177929",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42cc57f9-a34c-4cbe-aaab-fcb2c47478b6",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7847),
                            Email = "user7@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAMQI2JpS0F3W3gyMROgiMnRWT769HiPzYShSFyk94By+ENkB/lkiwSCLIFi+KpRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a7283a8-6e34-49c8-bd48-bbc9a1521081",
                            Telephone = "443-111-987",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "71ae1df7-a006-4a2b-b0a5-31cf12583ac9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd74e3d0-102d-4ed4-84dc-d3733cfe1668",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7865),
                            Email = "user8@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEaepcLJWZ7kkuK+984oQJol8IKQtrZRsyn+dNS9s0u62SmIykGLL24u8THb4skX8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f2d6217-dfb3-43b5-82ff-1544aa125cb1",
                            Telephone = "443-111-654",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3c452363-ea64-4fac-934c-95a8c892fb04",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325b3fc8-87ea-4035-8bf3-7aed627b0a82",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7880),
                            Email = "user9@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAELwySTvK6m+GCOyBMw1TSfJfgBnC5WBhuzwEeHofQVM37n8t9//SuGnfSjxKzj0Z1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "daabcee1-1c4f-4b57-95b8-c8aef9c7bb28",
                            Telephone = "443-111-556",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4fee8d86-bed2-48df-9b2c-f02835b35099",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6779cf34-3c32-4a4e-82f8-2a8f08f52b8b",
                            CreatedAt = new DateTime(2020, 3, 28, 19, 59, 56, 628, DateTimeKind.Local).AddTicks(7896),
                            Email = "user10@ba.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@BA.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENI86EpO2CpaCc9AAFlmBI7IizVT84RuuqX/eLzlYh+yxb3HY3JI1chDwVOggW1Wsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10235585-f192-4399-9c91-0509039fe9b6",
                            Telephone = "443-111-478",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Store.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Store.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Store.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Models.Customer", b =>
                {
                    b.HasOne("Store.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Store.Models.Employee", b =>
                {
                    b.HasOne("Store.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Store.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Store.Models.Employee", "UserId");
                });

            modelBuilder.Entity("Store.Models.EmployeeCustomers", b =>
                {
                    b.HasOne("Store.Models.Customer", "Customer")
                        .WithMany("EmployeeCustomers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Store.Models.Employee", "Employee")
                        .WithMany("EmployeeCustomers")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Store.Models.Photo", b =>
                {
                    b.HasOne("Store.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("Store.Models.SaleOrder", b =>
                {
                    b.HasOne("Store.Models.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Store.Models.Product", "Product")
                        .WithMany("SalesOrders")
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
